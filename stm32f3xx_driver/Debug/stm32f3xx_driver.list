
stm32f3xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001274  08001274  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001274  08001274  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08001274  08001274  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001274  08001274  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001274  08001274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001278  08001278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  0800127c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020414  2**0
                  CONTENTS
 10 .bss          00000040  20000414  20000414  00020414  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  00020414  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002569  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000818  00000000  00000000  000229ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  000231c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00023390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030bc  00000000  00000000  00023510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020a9  00000000  00000000  000265cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000e754  00000000  00000000  00028675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00036dc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000654  00000000  00000000  00036e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000414 	.word	0x20000414
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800125c 	.word	0x0800125c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000418 	.word	0x20000418
 80001d0:	0800125c 	.word	0x0800125c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART2_Init>:


char msg[1024] = "UART Tx IT testing...\n\r";
USART_Handle usart2_handle;

void USART2_Init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <USART2_Init+0x34>)
 80001ea:	4a0c      	ldr	r2, [pc, #48]	; (800021c <USART2_Init+0x38>)
 80001ec:	601a      	str	r2, [r3, #0]
	usart2_handle.Config.BaudRate = USART_BAUD_115200;
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <USART2_Init+0x34>)
 80001f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001f4:	609a      	str	r2, [r3, #8]
	usart2_handle.Config.Mode = USART_MODE_TX;
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <USART2_Init+0x34>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	735a      	strb	r2, [r3, #13]
	usart2_handle.Config.StopBits = USART_STOP_1BIT;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <USART2_Init+0x34>)
 80001fe:	2200      	movs	r2, #0
 8000200:	731a      	strb	r2, [r3, #12]
	usart2_handle.Config.WordLength = USART_WORDLENGHT_8BIT;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <USART2_Init+0x34>)
 8000204:	2200      	movs	r2, #0
 8000206:	715a      	strb	r2, [r3, #5]
	usart2_handle.Config.Parity = USART_PARITY_DISABLE;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <USART2_Init+0x34>)
 800020a:	2202      	movs	r2, #2
 800020c:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 800020e:	4802      	ldr	r0, [pc, #8]	; (8000218 <USART2_Init+0x34>)
 8000210:	f000 fc9a 	bl	8000b48 <USART_Init>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	20000430 	.word	0x20000430
 800021c:	40004400 	.word	0x40004400

08000220 <USART2_GPIOInit>:

void USART2_GPIOInit(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	GPIO_Handle usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022a:	607b      	str	r3, [r7, #4]
	usart_gpios.Config.PinMode = GPIO_MODE_ALTERNATE;
 800022c:	2302      	movs	r3, #2
 800022e:	727b      	strb	r3, [r7, #9]
	usart_gpios.Config.PinOPType = GPIO_OTYPER_PP;
 8000230:	2300      	movs	r3, #0
 8000232:	733b      	strb	r3, [r7, #12]
	usart_gpios.Config.PuPdControl = GPIO_PUPD_PU;
 8000234:	2301      	movs	r3, #1
 8000236:	72fb      	strb	r3, [r7, #11]
	usart_gpios.Config.PinSpeed = GPIO_SPEED_HIGH;
 8000238:	2302      	movs	r3, #2
 800023a:	72bb      	strb	r3, [r7, #10]
	usart_gpios.Config.PinAltFunc = 7;
 800023c:	2307      	movs	r3, #7
 800023e:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.Config.PinNumber = GPIO_PIN_2;
 8000240:	2302      	movs	r3, #2
 8000242:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa2c 	bl	80006a4 <GPIO_Init>

	//USART2 RX
	usart_gpios.Config.PinNumber = GPIO_PIN_3;
 800024c:	2303      	movs	r3, #3
 800024e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fa26 	bl	80006a4 <GPIO_Init>

}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
	GPIO_Handle GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <GPIO_ButtonInit+0x2c>)
 8000268:	607b      	str	r3, [r7, #4]
	GPIOBtn.Config.PinNumber = GPIO_PIN_13;
 800026a:	230d      	movs	r3, #13
 800026c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.Config.PinMode = GPIO_MODE_INPUT;
 800026e:	2300      	movs	r3, #0
 8000270:	727b      	strb	r3, [r7, #9]
	GPIOBtn.Config.PinSpeed = GPIO_SPEED_HIGH;
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.Config.PuPdControl = GPIO_PUPD_PU;
 8000276:	2301      	movs	r3, #1
 8000278:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa11 	bl	80006a4 <GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	48000800 	.word	0x48000800

08000290 <delay>:

void delay(void) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++)
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
		;
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <main>:

int main(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0


	GPIO_ButtonInit();
 80002c0:	f7ff ffce 	bl	8000260 <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002c4:	f7ff ffac 	bl	8000220 <USART2_GPIOInit>

	USART2_Init();
 80002c8:	f7ff ff8c 	bl	80001e4 <USART2_Init>

	NVIC_SetPriority(USART2_IRQn, 0, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	2026      	movs	r0, #38	; 0x26
 80002d2:	f000 f864 	bl	800039e <NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 80002d6:	2026      	movs	r0, #38	; 0x26
 80002d8:	f000 f87d 	bl	80003d6 <NVIC_EnableIRQ>

	USART_PeripheralControl(USART2, ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	4812      	ldr	r0, [pc, #72]	; (8000328 <main+0x6c>)
 80002e0:	f000 fc16 	bl	8000b10 <USART_PeripheralControl>

	while (1) {


		//wait till button is pressed
		while (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13))
 80002e4:	bf00      	nop
 80002e6:	210d      	movs	r1, #13
 80002e8:	4810      	ldr	r0, [pc, #64]	; (800032c <main+0x70>)
 80002ea:	f000 fb73 	bl	80009d4 <GPIO_ReadFromInputPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d1f8      	bne.n	80002e6 <main+0x2a>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002f4:	f7ff ffcc 	bl	8000290 <delay>

		while(USART_TransmitDataIT(&usart2_handle,(uint8_t*)msg, strlen(msg))==USART_BUSY_IN_TX);
 80002f8:	bf00      	nop
 80002fa:	480d      	ldr	r0, [pc, #52]	; (8000330 <main+0x74>)
 80002fc:	f7ff ff6a 	bl	80001d4 <strlen>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	490a      	ldr	r1, [pc, #40]	; (8000330 <main+0x74>)
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x78>)
 8000308:	f000 fcae 	bl	8000c68 <USART_TransmitDataIT>
 800030c:	4603      	mov	r3, r0
 800030e:	2b02      	cmp	r3, #2
 8000310:	d0f3      	beq.n	80002fa <main+0x3e>

		while(USART_GetFlagStatus(&usart2_handle.pUSARTx, USART_FLAG_BUSY));
 8000312:	bf00      	nop
 8000314:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000318:	4806      	ldr	r0, [pc, #24]	; (8000334 <main+0x78>)
 800031a:	f000 fe3f 	bl	8000f9c <USART_GetFlagStatus>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1f7      	bne.n	8000314 <main+0x58>
		while (GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13))
 8000324:	e7de      	b.n	80002e4 <main+0x28>
 8000326:	bf00      	nop
 8000328:	40004400 	.word	0x40004400
 800032c:	48000800 	.word	0x48000800
 8000330:	20000000 	.word	0x20000000
 8000334:	20000430 	.word	0x20000430

08000338 <USART2_EXTI26_IRQHandler>:
	}

	return 0;
}

void USART2_EXTI26_IRQHandler() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <USART2_EXTI26_IRQHandler+0x10>)
 800033e:	f000 fcc1 	bl	8000cc4 <USART_IRQHandling>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000430 	.word	0x20000430

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 ff4b 	bl	8001214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff9d 	bl	80002bc <main>

08000382 <LoopForever>:

LoopForever:
    b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000390:	0800127c 	.word	0x0800127c
  ldr r2, =_sbss
 8000394:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000398:	20000454 	.word	0x20000454

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>

0800039e <NVIC_SetPriority>:
 *
 * @Note              - example -> NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 * 						example -> NVIC_SetPriority(USART2_IRQn, 1, 0);
 */
void NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b086      	sub	sp, #24
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	4603      	mov	r3, r0
 80003a6:	60b9      	str	r1, [r7, #8]
 80003a8:	607a      	str	r2, [r7, #4]
 80003aa:	73fb      	strb	r3, [r7, #15]
	  uint32_t prioritygroup = 0x00U;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

	  prioritygroup = __NVIC_GetPriorityGrouping();
 80003b0:	f000 f820 	bl	80003f4 <__NVIC_GetPriorityGrouping>
 80003b4:	6178      	str	r0, [r7, #20]

	  __NVIC_SetPriority(IRQn, __NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	6978      	ldr	r0, [r7, #20]
 80003bc:	f000 f852 	bl	8000464 <__NVIC_EncodePriority>
 80003c0:	4602      	mov	r2, r0
 80003c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c6:	4611      	mov	r1, r2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f821 	bl	8000410 <__NVIC_SetPriority>
}
 80003ce:	bf00      	nop
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <NVIC_EnableIRQ>:
 *
 * @Note              - example -> NVIC_EnableIRQ(EXTI0_IRQn);
 *
 */
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4603      	mov	r3, r0
 80003de:	71fb      	strb	r3, [r7, #7]
	__NVIC_EnableIRQ(IRQn);
 80003e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f871 	bl	80004cc <__NVIC_EnableIRQ>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <__NVIC_GetPriorityGrouping>:
 *
 * @Note              - none
 *
 */
uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & (7UL<<8U)) >> 8U));
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <__NVIC_GetPriorityGrouping+0x18>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	0a1b      	lsrs	r3, r3, #8
 80003fe:	f003 0307 	and.w	r3, r3, #7
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <__NVIC_SetPriority>:
 *
 * @Note              - none
 *
 */
void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	6039      	str	r1, [r7, #0]
 800041a:	71fb      	strb	r3, [r7, #7]
 if ((int32_t)(IRQn) >= 0)
 800041c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	db0a      	blt.n	800043a <__NVIC_SetPriority+0x2a>
 {
   NVIC->IP[((uint32_t)IRQn)]= (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	b2da      	uxtb	r2, r3
 8000428:	490c      	ldr	r1, [pc, #48]	; (800045c <__NVIC_SetPriority+0x4c>)
 800042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042e:	0112      	lsls	r2, r2, #4
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	440b      	add	r3, r1
 8000434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 }
 else
 {
   SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
 }
}
 8000438:	e00a      	b.n	8000450 <__NVIC_SetPriority+0x40>
   SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4908      	ldr	r1, [pc, #32]	; (8000460 <__NVIC_SetPriority+0x50>)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f003 030f 	and.w	r3, r3, #15
 8000446:	3b04      	subs	r3, #4
 8000448:	0112      	lsls	r2, r2, #4
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	440b      	add	r3, r1
 800044e:	761a      	strb	r2, [r3, #24]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	e000e100 	.word	0xe000e100
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <__NVIC_EncodePriority>:
 *
 * @Note              - none
 *
 */
uint32_t __NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000464:	b480      	push	{r7}
 8000466:	b089      	sub	sp, #36	; 0x24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4U)) ? (uint32_t)(4U) : (uint32_t)(7UL - PriorityGroupTmp);
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	f1c3 0307 	rsb	r3, r3, #7
 800047e:	2b04      	cmp	r3, #4
 8000480:	bf28      	it	cs
 8000482:	2304      	movcs	r3, #4
 8000484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(4U)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4U));
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	3304      	adds	r3, #4
 800048a:	2b06      	cmp	r3, #6
 800048c:	d902      	bls.n	8000494 <__NVIC_EncodePriority+0x30>
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3b03      	subs	r3, #3
 8000492:	e000      	b.n	8000496 <__NVIC_EncodePriority+0x32>
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000498:	f04f 32ff 	mov.w	r2, #4294967295
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43da      	mvns	r2, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	401a      	ands	r2, r3
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ac:	f04f 31ff 	mov.w	r1, #4294967295
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43d9      	mvns	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004bc:	4313      	orrs	r3, r2
         );
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	; 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <__NVIC_EnableIRQ>:
 *
 * @Note              - none
 *
 */
void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	db0b      	blt.n	80004f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 021f 	and.w	r2, r3, #31
 80004e4:	4907      	ldr	r1, [pc, #28]	; (8000504 <__NVIC_EnableIRQ+0x38>)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	095b      	lsrs	r3, r3, #5
 80004ec:	2001      	movs	r0, #1
 80004ee:	fa00 f202 	lsl.w	r2, r0, r2
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	e000e100 	.word	0xe000e100

08000508 <GPIO_PeriClockControl>:
 * @return            - none
 *
 * @Note              -
 *
 */
void GPIO_PeriClockControl(GPIO_Type *pGPIOx, uint8_t EnorDi) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d157      	bne.n	80005ca <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x28>
			IOPA_PCLCK_EN();
 8000522:	4b58      	ldr	r3, [pc, #352]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a57      	ldr	r2, [pc, #348]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	6153      	str	r3, [r2, #20]
		} else if (pGPIOx == GPIOH) {
			IOPH_PCLCK_DIS();
		}
	}

}
 800052e:	e0a3      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOB) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a55      	ldr	r2, [pc, #340]	; (8000688 <GPIO_PeriClockControl+0x180>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PeriClockControl+0x3e>
			IOPB_PCLCK_EN();
 8000538:	4b52      	ldr	r3, [pc, #328]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a51      	ldr	r2, [pc, #324]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000542:	6153      	str	r3, [r2, #20]
}
 8000544:	e098      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOC) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a50      	ldr	r2, [pc, #320]	; (800068c <GPIO_PeriClockControl+0x184>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x54>
			IOPC_PCLCK_EN();
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a4c      	ldr	r2, [pc, #304]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000558:	6153      	str	r3, [r2, #20]
}
 800055a:	e08d      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOD) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a4c      	ldr	r2, [pc, #304]	; (8000690 <GPIO_PeriClockControl+0x188>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d106      	bne.n	8000572 <GPIO_PeriClockControl+0x6a>
			IOPD_PCLCK_EN();
 8000564:	4b47      	ldr	r3, [pc, #284]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a46      	ldr	r2, [pc, #280]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800056a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800056e:	6153      	str	r3, [r2, #20]
}
 8000570:	e082      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOE) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a47      	ldr	r2, [pc, #284]	; (8000694 <GPIO_PeriClockControl+0x18c>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d106      	bne.n	8000588 <GPIO_PeriClockControl+0x80>
			IOPE_PCLCK_EN();
 800057a:	4b42      	ldr	r3, [pc, #264]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a41      	ldr	r2, [pc, #260]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000584:	6153      	str	r3, [r2, #20]
}
 8000586:	e077      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOF) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a43      	ldr	r2, [pc, #268]	; (8000698 <GPIO_PeriClockControl+0x190>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <GPIO_PeriClockControl+0x96>
			IOPF_PCLCK_EN();
 8000590:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a3b      	ldr	r2, [pc, #236]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059a:	6153      	str	r3, [r2, #20]
}
 800059c:	e06c      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOG) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a3e      	ldr	r2, [pc, #248]	; (800069c <GPIO_PeriClockControl+0x194>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d106      	bne.n	80005b4 <GPIO_PeriClockControl+0xac>
			IOPG_PCLCK_EN();
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a36      	ldr	r2, [pc, #216]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005b0:	6153      	str	r3, [r2, #20]
}
 80005b2:	e061      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOH) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a3a      	ldr	r2, [pc, #232]	; (80006a0 <GPIO_PeriClockControl+0x198>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d15d      	bne.n	8000678 <GPIO_PeriClockControl+0x170>
			IOPH_PCLCK_EN();
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a30      	ldr	r2, [pc, #192]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c6:	6153      	str	r3, [r2, #20]
}
 80005c8:	e056      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005d0:	d106      	bne.n	80005e0 <GPIO_PeriClockControl+0xd8>
			IOPA_PCLCK_DIS();
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	6153      	str	r3, [r2, #20]
}
 80005de:	e04b      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOB) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a29      	ldr	r2, [pc, #164]	; (8000688 <GPIO_PeriClockControl+0x180>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d106      	bne.n	80005f6 <GPIO_PeriClockControl+0xee>
			IOPB_PCLCK_DIS();
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a25      	ldr	r2, [pc, #148]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 80005ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f2:	6153      	str	r3, [r2, #20]
}
 80005f4:	e040      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOC) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <GPIO_PeriClockControl+0x184>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d106      	bne.n	800060c <GPIO_PeriClockControl+0x104>
			IOPC_PCLCK_DIS();
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a20      	ldr	r2, [pc, #128]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6153      	str	r3, [r2, #20]
}
 800060a:	e035      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOD) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <GPIO_PeriClockControl+0x188>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <GPIO_PeriClockControl+0x11a>
			IOPD_PCLCK_DIS();
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800061a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061e:	6153      	str	r3, [r2, #20]
}
 8000620:	e02a      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOE) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <GPIO_PeriClockControl+0x18c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <GPIO_PeriClockControl+0x130>
			IOPE_PCLCK_DIS();
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000634:	6153      	str	r3, [r2, #20]
}
 8000636:	e01f      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOF) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <GPIO_PeriClockControl+0x190>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_PeriClockControl+0x146>
			IOPF_PCLCK_DIS();
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064a:	6153      	str	r3, [r2, #20]
}
 800064c:	e014      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOG) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <GPIO_PeriClockControl+0x194>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_PeriClockControl+0x15c>
			IOPG_PCLCK_DIS();
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800065c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000660:	6153      	str	r3, [r2, #20]
}
 8000662:	e009      	b.n	8000678 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOH) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <GPIO_PeriClockControl+0x198>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d105      	bne.n	8000678 <GPIO_PeriClockControl+0x170>
			IOPH_PCLCK_DIS();
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <GPIO_PeriClockControl+0x17c>)
 8000672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000676:	6153      	str	r3, [r2, #20]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000
 8000688:	48000400 	.word	0x48000400
 800068c:	48000800 	.word	0x48000800
 8000690:	48000c00 	.word	0x48000c00
 8000694:	48001000 	.word	0x48001000
 8000698:	48001400 	.word	0x48001400
 800069c:	48001800 	.word	0x48001800
 80006a0:	48001c00 	.word	0x48001c00

080006a4 <GPIO_Init>:
 * @return            - none
 *
 * @Note              -
 *
 */
void GPIO_Init(GPIO_Handle *pGPIOHandle) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE); //Enabled clock
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff26 	bl	8000508 <GPIO_PeriClockControl>

	if (pGPIOHandle->Config.PinMode <= GPIO_MODE_ANOLOG) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d822      	bhi.n	800070a <GPIO_Init+0x66>
		// gpio mode
		temp = (pGPIOHandle->Config.PinMode
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->Config.PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->Config.PinMode
 80006d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &=
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
				~(3 << (2 * pGPIOHandle->Config.PinNumber)); //reset
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2103      	movs	r1, #3
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->MODER &=
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set new settings
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	430a      	orrs	r2, r1
 8000702:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e0bf      	b.n	800088a <GPIO_Init+0x1e6>

	} else {
		if (pGPIOHandle->Config.PinMode == GPIO_MODE_IT_FT) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d117      	bne.n	8000742 <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->Config.PinNumber);
 8000712:	4b47      	ldr	r3, [pc, #284]	; (8000830 <GPIO_Init+0x18c>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7912      	ldrb	r2, [r2, #4]
 800071a:	4611      	mov	r1, r2
 800071c:	2201      	movs	r2, #1
 800071e:	408a      	lsls	r2, r1
 8000720:	4611      	mov	r1, r2
 8000722:	4a43      	ldr	r2, [pc, #268]	; (8000830 <GPIO_Init+0x18c>)
 8000724:	430b      	orrs	r3, r1
 8000726:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->Config.PinNumber);
 8000728:	4b41      	ldr	r3, [pc, #260]	; (8000830 <GPIO_Init+0x18c>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	7912      	ldrb	r2, [r2, #4]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	43d2      	mvns	r2, r2
 8000738:	4611      	mov	r1, r2
 800073a:	4a3d      	ldr	r2, [pc, #244]	; (8000830 <GPIO_Init+0x18c>)
 800073c:	400b      	ands	r3, r1
 800073e:	6093      	str	r3, [r2, #8]
 8000740:	e035      	b.n	80007ae <GPIO_Init+0x10a>

		} else if (pGPIOHandle->Config.PinMode == GPIO_MODE_IT_RT) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	795b      	ldrb	r3, [r3, #5]
 8000746:	2b05      	cmp	r3, #5
 8000748:	d117      	bne.n	800077a <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->Config.PinNumber);
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <GPIO_Init+0x18c>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	7912      	ldrb	r2, [r2, #4]
 8000752:	4611      	mov	r1, r2
 8000754:	2201      	movs	r2, #1
 8000756:	408a      	lsls	r2, r1
 8000758:	4611      	mov	r1, r2
 800075a:	4a35      	ldr	r2, [pc, #212]	; (8000830 <GPIO_Init+0x18c>)
 800075c:	430b      	orrs	r3, r1
 800075e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->Config.PinNumber);
 8000760:	4b33      	ldr	r3, [pc, #204]	; (8000830 <GPIO_Init+0x18c>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	7912      	ldrb	r2, [r2, #4]
 8000768:	4611      	mov	r1, r2
 800076a:	2201      	movs	r2, #1
 800076c:	408a      	lsls	r2, r1
 800076e:	43d2      	mvns	r2, r2
 8000770:	4611      	mov	r1, r2
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <GPIO_Init+0x18c>)
 8000774:	400b      	ands	r3, r1
 8000776:	60d3      	str	r3, [r2, #12]
 8000778:	e019      	b.n	80007ae <GPIO_Init+0x10a>

		} else if (pGPIOHandle->Config.PinMode == GPIO_MODE_IT_RFT) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d115      	bne.n	80007ae <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->Config.PinNumber);
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <GPIO_Init+0x18c>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7912      	ldrb	r2, [r2, #4]
 800078a:	4611      	mov	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	408a      	lsls	r2, r1
 8000790:	4611      	mov	r1, r2
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <GPIO_Init+0x18c>)
 8000794:	430b      	orrs	r3, r1
 8000796:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR1 |= (1 << pGPIOHandle->Config.PinNumber);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <GPIO_Init+0x18c>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	7912      	ldrb	r2, [r2, #4]
 80007a0:	4611      	mov	r1, r2
 80007a2:	2201      	movs	r2, #1
 80007a4:	408a      	lsls	r2, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <GPIO_Init+0x18c>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->Config.PinNumber / 4;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->Config.PinNumber % 4;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80007c8:	d042      	beq.n	8000850 <GPIO_Init+0x1ac>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <GPIO_Init+0x190>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d02b      	beq.n	800082c <GPIO_Init+0x188>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <GPIO_Init+0x194>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d024      	beq.n	8000828 <GPIO_Init+0x184>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <GPIO_Init+0x198>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d01d      	beq.n	8000824 <GPIO_Init+0x180>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <GPIO_Init+0x19c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d016      	beq.n	8000820 <GPIO_Init+0x17c>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <GPIO_Init+0x1a0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d00f      	beq.n	800081c <GPIO_Init+0x178>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a11      	ldr	r2, [pc, #68]	; (8000848 <GPIO_Init+0x1a4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d008      	beq.n	8000818 <GPIO_Init+0x174>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <GPIO_Init+0x1a8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d101      	bne.n	8000814 <GPIO_Init+0x170>
 8000810:	2307      	movs	r3, #7
 8000812:	e01e      	b.n	8000852 <GPIO_Init+0x1ae>
 8000814:	2300      	movs	r3, #0
 8000816:	e01c      	b.n	8000852 <GPIO_Init+0x1ae>
 8000818:	2306      	movs	r3, #6
 800081a:	e01a      	b.n	8000852 <GPIO_Init+0x1ae>
 800081c:	2305      	movs	r3, #5
 800081e:	e018      	b.n	8000852 <GPIO_Init+0x1ae>
 8000820:	2304      	movs	r3, #4
 8000822:	e016      	b.n	8000852 <GPIO_Init+0x1ae>
 8000824:	2303      	movs	r3, #3
 8000826:	e014      	b.n	8000852 <GPIO_Init+0x1ae>
 8000828:	2302      	movs	r3, #2
 800082a:	e012      	b.n	8000852 <GPIO_Init+0x1ae>
 800082c:	2301      	movs	r3, #1
 800082e:	e010      	b.n	8000852 <GPIO_Init+0x1ae>
 8000830:	40010400 	.word	0x40010400
 8000834:	48000400 	.word	0x48000400
 8000838:	48000800 	.word	0x48000800
 800083c:	48000c00 	.word	0x48000c00
 8000840:	48001000 	.word	0x48001000
 8000844:	48001400 	.word	0x48001400
 8000848:	48001800 	.word	0x48001800
 800084c:	48001c00 	.word	0x48001c00
 8000850:	2300      	movs	r3, #0
 8000852:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLCK_EN();
 8000854:	4b5c      	ldr	r3, [pc, #368]	; (80009c8 <GPIO_Init+0x324>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a5b      	ldr	r2, [pc, #364]	; (80009c8 <GPIO_Init+0x324>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000860:	7c7a      	ldrb	r2, [r7, #17]
 8000862:	7cbb      	ldrb	r3, [r7, #18]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	fa02 f103 	lsl.w	r1, r2, r3
 800086a:	4a58      	ldr	r2, [pc, #352]	; (80009cc <GPIO_Init+0x328>)
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	3302      	adds	r3, #2
 8000870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR1 |= 1 << pGPIOHandle->Config.PinNumber;
 8000874:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <GPIO_Init+0x32c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	7912      	ldrb	r2, [r2, #4]
 800087c:	4611      	mov	r1, r2
 800087e:	2201      	movs	r2, #1
 8000880:	408a      	lsls	r2, r1
 8000882:	4611      	mov	r1, r2
 8000884:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <GPIO_Init+0x32c>)
 8000886:	430b      	orrs	r3, r1
 8000888:	6013      	str	r3, [r2, #0]

	}

	if (pGPIOHandle->Config.PinMode == GPIO_MODE_ALTERNATE) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	795b      	ldrb	r3, [r3, #5]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d131      	bne.n	80008f6 <GPIO_Init+0x252>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->Config.PinNumber / 8;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->Config.PinNumber % 8;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xf << (4 * temp2)); //clear
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7c3a      	ldrb	r2, [r7, #16]
 80008aa:	3208      	adds	r2, #8
 80008ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	220f      	movs	r2, #15
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	7c3a      	ldrb	r2, [r7, #16]
 80008c4:	4001      	ands	r1, r0
 80008c6:	3208      	adds	r2, #8
 80008c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->Config.PinAltFunc
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	7c3a      	ldrb	r2, [r7, #16]
 80008d2:	3208      	adds	r2, #8
 80008d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7a5b      	ldrb	r3, [r3, #9]
 80008dc:	461a      	mov	r2, r3
				<< (4 * temp2));
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->Config.PinAltFunc
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	7c3a      	ldrb	r2, [r7, #16]
 80008ee:	4301      	orrs	r1, r0
 80008f0:	3208      	adds	r2, #8
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	//gpio otyper
	temp = (pGPIOHandle->Config.PinOPType << (pGPIOHandle->Config.PinNumber));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->Config.PinNumber)); //reset
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	4619      	mov	r1, r3
 8000912:	2301      	movs	r3, #1
 8000914:	408b      	lsls	r3, r1
 8000916:	43db      	mvns	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6859      	ldr	r1, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	430a      	orrs	r2, r1
 8000930:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]

	//gpio output speed
	temp =
			(pGPIOHandle->Config.PinSpeed << (2 * pGPIOHandle->Config.PinNumber));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
	temp =
 8000946:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << (2 * pGPIOHandle->Config.PinNumber)); //reset
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2103      	movs	r1, #3
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	400a      	ands	r2, r1
 8000964:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6899      	ldr	r1, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	430a      	orrs	r2, r1
 8000974:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

	// gpio pull up-down
	temp = (pGPIOHandle->Config.PuPdControl
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	79db      	ldrb	r3, [r3, #7]
 800097e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->Config.PinNumber));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->Config.PuPdControl
 800098a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->Config.PinNumber)); //reset
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2103      	movs	r1, #3
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	4619      	mov	r1, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	400a      	ands	r2, r1
 80009a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68d9      	ldr	r1, [r3, #12]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	60da      	str	r2, [r3, #12]
	temp = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]

}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000
 80009d0:	40010400 	.word	0x40010400

080009d4 <GPIO_ReadFromInputPin>:
 * @return            - uint8_t
 *
 * @Note              - while(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_1));
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Type *pGPIOx, uint8_t PinNumber) {
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	uint8_t state;
	state = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691a      	ldr	r2, [r3, #16]
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
	return state;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <USART_PeriClockControl>:
 * @return            - none
 *
 * @Note              - USART_PeriClockControl(USART2,ENABLE);
 *
 */
void USART_PeriClockControl(USART_Type *pUSARTx, uint8_t EnorDi) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE) {
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d136      	bne.n	8000a80 <USART_PeriClockControl+0x80>
		if (pUSARTx == USART1) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a38      	ldr	r2, [pc, #224]	; (8000af8 <USART_PeriClockControl+0xf8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <USART_PeriClockControl+0x28>
			USART1_PCLCK_EN();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a37      	ldr	r2, [pc, #220]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6193      	str	r3, [r2, #24]
		} else if (pUSARTx == UART5) {
			UART5_PCLCK_DIS();
		}
	}

}
 8000a26:	e061      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == USART2) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a35      	ldr	r2, [pc, #212]	; (8000b00 <USART_PeriClockControl+0x100>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <USART_PeriClockControl+0x3e>
			USART2_PCLCK_EN();
 8000a30:	4b32      	ldr	r3, [pc, #200]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3a:	61d3      	str	r3, [r2, #28]
}
 8000a3c:	e056      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == USART3) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <USART_PeriClockControl+0x104>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <USART_PeriClockControl+0x54>
			USART3_PCLCK_EN();
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a2c      	ldr	r2, [pc, #176]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a50:	61d3      	str	r3, [r2, #28]
}
 8000a52:	e04b      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == UART4) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <USART_PeriClockControl+0x108>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <USART_PeriClockControl+0x6a>
			UART4_PCLCK_EN();
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a26      	ldr	r2, [pc, #152]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a66:	61d3      	str	r3, [r2, #28]
}
 8000a68:	e040      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == UART5) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <USART_PeriClockControl+0x10c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d13c      	bne.n	8000aec <USART_PeriClockControl+0xec>
			UART5_PCLCK_EN();
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a7c:	61d3      	str	r3, [r2, #28]
}
 8000a7e:	e035      	b.n	8000aec <USART_PeriClockControl+0xec>
		if (pUSARTx == USART1) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <USART_PeriClockControl+0xf8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <USART_PeriClockControl+0x96>
			USART1_PCLCK_DIS();
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6193      	str	r3, [r2, #24]
}
 8000a94:	e02a      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == USART2) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <USART_PeriClockControl+0x100>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <USART_PeriClockControl+0xac>
			USART2_PCLCK_DIS();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	61d3      	str	r3, [r2, #28]
}
 8000aaa:	e01f      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == USART3) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <USART_PeriClockControl+0x104>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d106      	bne.n	8000ac2 <USART_PeriClockControl+0xc2>
			USART3_PCLCK_DIS();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abe:	61d3      	str	r3, [r2, #28]
}
 8000ac0:	e014      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == UART4) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <USART_PeriClockControl+0x108>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <USART_PeriClockControl+0xd8>
			UART4_PCLCK_DIS();
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ad4:	61d3      	str	r3, [r2, #28]
}
 8000ad6:	e009      	b.n	8000aec <USART_PeriClockControl+0xec>
		} else if (pUSARTx == UART5) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <USART_PeriClockControl+0x10c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d105      	bne.n	8000aec <USART_PeriClockControl+0xec>
			UART5_PCLCK_DIS();
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <USART_PeriClockControl+0xfc>)
 8000ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aea:	61d3      	str	r3, [r2, #28]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40004c00 	.word	0x40004c00
 8000b0c:	40005000 	.word	0x40005000

08000b10 <USART_PeripheralControl>:
 * @return            - none
 *
 * @Note              - none
 *
 */
void USART_PeripheralControl(USART_Type *pUSARTx, uint8_t EnorDi) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d106      	bne.n	8000b30 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= USART_CR1_UE; //USART enable
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f043 0201 	orr.w	r2, r3, #1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
	} else {
		pUSARTx->CR1 &= ~USART_CR1_UE; //USART disable

	}
}
 8000b2e:	e005      	b.n	8000b3c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~USART_CR1_UE; //USART disable
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f023 0201 	bic.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <USART_Init>:
 * @return            - none
 *
 * @Note              - none
 *
 */
void USART_Init(USART_Handle *pUSARTHandle) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]

	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff50 	bl	8000a00 <USART_PeriClockControl>
	pUSARTHandle->pUSARTx->CR1 &= ~USART_CR1_UE; //USART disable
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]

	temp |= (pUSARTHandle->Config.WordLength << USART_CR1_M1_Pos); //Word length
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	795b      	ldrb	r3, [r3, #5]
 8000b74:	071b      	lsls	r3, r3, #28
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
	temp |= (pUSARTHandle->Config.OverSampling <<USART_CR1_OVER8_Pos); //Oversampling mode
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	03db      	lsls	r3, r3, #15
 8000b84:	461a      	mov	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR1 |= temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

	temp = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR2 |= (pUSARTHandle->Config.StopBits << USART_CR2_STOP_Pos); //STOP bits
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7b1b      	ldrb	r3, [r3, #12]
 8000baa:	031b      	lsls	r3, r3, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	605a      	str	r2, [r3, #4]

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->Config.BaudRate);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f000 fa0b 	bl	8000fdc <USART_SetBaudRate>

	if (pUSARTHandle->Config.Mode == USART_MODE_TXRX) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b5b      	ldrb	r3, [r3, #13]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d110      	bne.n	8000bf0 <USART_Init+0xa8>
		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_RE; //Receiver enable
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0204 	orr.w	r2, r2, #4
 8000bdc:	601a      	str	r2, [r3, #0]
		pUSARTHandle->pUSARTx->CR1 |=USART_CR1_TE; //Transmitter enable
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 0208 	orr.w	r2, r2, #8
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e018      	b.n	8000c22 <USART_Init+0xda>
	} else if (pUSARTHandle->Config.Mode == USART_MODE_TX) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7b5b      	ldrb	r3, [r3, #13]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <USART_Init+0xc2>
		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_TE; //Transmitter enable
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0208 	orr.w	r2, r2, #8
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e00b      	b.n	8000c22 <USART_Init+0xda>
	} else if (pUSARTHandle->Config.Mode == USART_MODE_RX) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7b5b      	ldrb	r3, [r3, #13]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d107      	bne.n	8000c22 <USART_Init+0xda>
		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_RE; //Receiver enable
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0204 	orr.w	r2, r2, #4
 8000c20:	601a      	str	r2, [r3, #0]
	}

	if (pUSARTHandle->Config.Parity != USART_PARITY_DISABLE) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b9b      	ldrb	r3, [r3, #14]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d012      	beq.n	8000c50 <USART_Init+0x108>
		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_PCE; //Parity control enable
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c38:	601a      	str	r2, [r3, #0]
		pUSARTHandle->pUSARTx->CR1 |= (pUSARTHandle->Config.Parity << USART_CR1_PS_Pos); // Parity selection
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7b9b      	ldrb	r3, [r3, #14]
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	4619      	mov	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	601a      	str	r2, [r3, #0]
	}

	pUSARTHandle->pUSARTx->CR1 |= (1 << 0); //USART enable
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f042 0201 	orr.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <USART_TransmitDataIT>:
 *
 * @Note              - none
 *
 */
uint8_t USART_TransmitDataIT(USART_Handle *pUSARTHandle, uint8_t *pTxBuffer,
		uint32_t Len) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]

	uint8_t txstate = pUSARTHandle->TxBusyState;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7a:	75fb      	strb	r3, [r7, #23]

	if (txstate != USART_BUSY_IN_TX) {
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d019      	beq.n	8000cb6 <USART_TransmitDataIT+0x4e>
		pUSARTHandle->TxLen = Len;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
		pUSARTHandle->pTxBuffer = pTxBuffer;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	611a      	str	r2, [r3, #16]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2202      	movs	r2, #2
 8000c92:	f883 2020 	strb.w	r2, [r3, #32]

		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_TXEIE;	//TXEIE: interrupt enable
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ca4:	601a      	str	r2, [r3, #0]

		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_TCIE;	//TCIE: Transmission complete interrupt enable
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb4:	601a      	str	r2, [r3, #0]

	}

	return txstate;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]

}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <USART_IRQHandling>:
 * @return            - none
 *
 * @Note              - none
 *
 */
void USART_IRQHandling(USART_Handle *pUSARTHandle) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	uint16_t *pdata;

	/*************************transmit data ********************************************/

	temp1 = pUSARTHandle->pUSARTx->ISR & USART_ISR_TC;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd8:	73fb      	strb	r3, [r7, #15]

	//Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_TCIE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce6:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d031      	beq.n	8000d52 <USART_IRQHandling+0x8e>
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d02e      	beq.n	8000d52 <USART_IRQHandling+0x8e>
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if (pUSARTHandle->TxBusyState == USART_BUSY_IN_TX) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d129      	bne.n	8000d52 <USART_IRQHandling+0x8e>
			//Check the TxLen . If it is zero then close the data transmission
			if (pUSARTHandle->TxLen == 0) {
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d125      	bne.n	8000d52 <USART_IRQHandling+0x8e>
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->ICR |= USART_ICR_TCCF;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a1a      	ldr	r2, [r3, #32]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d14:	621a      	str	r2, [r3, #32]
				pUSARTHandle->pUSARTx->CR1&=~USART_CR1_TCIE;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d24:	601a      	str	r2, [r3, #0]
				pUSARTHandle->pUSARTx->CR1&=~USART_CR1_TXEIE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d34:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f939 	bl	8000fc4 <USART_ApplicationEventCallback>
		}
	}

	// check TXE. if TXE flag is zero. transmit data

	temp1 = (pUSARTHandle->pUSARTx->ISR & USART_ISR_TXE); //TXE: Transmit data register empty
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d5e:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUSARTx->CR1 & USART_CR1_TXEIE); //TXEIE: interrupt enable
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d6c:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) //
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d049      	beq.n	8000e08 <USART_IRQHandling+0x144>
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d046      	beq.n	8000e08 <USART_IRQHandling+0x144>
			{
		if (pUSARTHandle->TxBusyState == USART_BUSY_IN_TX) {
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d141      	bne.n	8000e08 <USART_IRQHandling+0x144>
			if (pUSARTHandle->TxLen > 0) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d03d      	beq.n	8000e08 <USART_IRQHandling+0x144>

				if (pUSARTHandle->Config.WordLength == USART_WORDLENGHT_9BIT) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	795b      	ldrb	r3, [r3, #5]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d129      	bne.n	8000de8 <USART_IRQHandling+0x124>
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	60bb      	str	r3, [r7, #8]

					pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t) (0x01ff));
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
					//check for ParityControl
					if (pUSARTHandle->Config.Parity == USART_PARITY_DISABLE) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7b9b      	ldrb	r3, [r3, #14]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10f      	bne.n	8000dd2 <USART_IRQHandling+0x10e>
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	1e9a      	subs	r2, r3, #2
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
 8000dd0:	e01a      	b.n	8000e08 <USART_IRQHandling+0x144>
					} else {
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen -= 1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	e00f      	b.n	8000e08 <USART_IRQHandling+0x144>
					}
				} else {
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
							& (uint8_t) 0xFF);

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen -= 1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	619a      	str	r2, [r3, #24]

		}
	}
	/*************************recieve data ********************************************/

	temp1 = (pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE); //RXNEIE: RXNE interrupt enable
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	73fb      	strb	r3, [r7, #15]
	temp2 = (pUSARTHandle->pUSARTx->ISR & USART_ISR_RXNE); //RXNE: Read data register not empty
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d073      	beq.n	8000f12 <USART_IRQHandling+0x24e>
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d070      	beq.n	8000f12 <USART_IRQHandling+0x24e>
		if (pUSARTHandle->RxBusyState == USART_BUSY_IN_RX) {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d16b      	bne.n	8000f12 <USART_IRQHandling+0x24e>
			if (pUSARTHandle->RxLen > 0) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d053      	beq.n	8000eea <USART_IRQHandling+0x226>
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if (pUSARTHandle->Config.WordLength == USART_WORDLENGHT_9BIT) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	795b      	ldrb	r3, [r3, #5]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d12f      	bne.n	8000eaa <USART_IRQHandling+0x1e6>
					//We are going to receive 9bit data in a frame

					//Now, check are we using ParityControl control or not
					if (pUSARTHandle->Config.Parity == USART_PARITY_DISABLE) {
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7b9b      	ldrb	r3, [r3, #14]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d119      	bne.n	8000e86 <USART_IRQHandling+0x1c2>
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) =
								(pUSARTHandle->pUSARTx->RDR & (uint16_t) 0x01FF);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	b29a      	uxth	r2, r3
						*((uint16_t*) pUSARTHandle->pRxBuffer) =
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
								(pUSARTHandle->pUSARTx->RDR & (uint16_t) 0x01FF);
 8000e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e62:	b292      	uxth	r2, r2
						*((uint16_t*) pUSARTHandle->pRxBuffer) =
 8000e64:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	695b      	ldr	r3, [r3, #20]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 2;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	1e9a      	subs	r2, r3, #2
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	61da      	str	r2, [r3, #28]
 8000e84:	e031      	b.n	8000eea <USART_IRQHandling+0x226>
					} else {
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						*pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	701a      	strb	r2, [r3, #0]
								& (uint8_t) 0xFF);
						pUSARTHandle->pRxBuffer++;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen -= 1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	1e5a      	subs	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	e01f      	b.n	8000eea <USART_IRQHandling+0x226>
					}
				} else {
					//We are going to receive 8bit data in a frame

					//Now, check are we using ParityControl control or not
					if (pUSARTHandle->Config.Parity == USART_PARITY_DISABLE) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7b9b      	ldrb	r3, [r3, #14]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d107      	bne.n	8000ec2 <USART_IRQHandling+0x1fe>
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						*pUSARTHandle->pRxBuffer =
								(uint8_t) (pUSARTHandle->pUSARTx->RDR
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
						*pUSARTHandle->pRxBuffer =
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
								(uint8_t) (pUSARTHandle->pUSARTx->RDR
 8000ebc:	b2d2      	uxtb	r2, r2
						*pUSARTHandle->pRxBuffer =
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e009      	b.n	8000ed6 <USART_IRQHandling+0x212>
					else {
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						*pUSARTHandle->pRxBuffer =
								(uint8_t) (pUSARTHandle->pUSARTx->RDR
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	b2da      	uxtb	r2, r3
						*pUSARTHandle->pRxBuffer =
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
								(uint8_t) (pUSARTHandle->pUSARTx->RDR
 8000ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ed2:	b2d2      	uxtb	r2, r2
						*pUSARTHandle->pRxBuffer =
 8000ed4:	701a      	strb	r2, [r3, #0]
										& (uint8_t) 0x7F);

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen -= 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	61da      	str	r2, [r3, #28]
				}

			}

			if (pUSARTHandle->RxLen <= 0) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10f      	bne.n	8000f12 <USART_IRQHandling+0x24e>
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~USART_CR1_RXNEIE; //RXNEIE: RXNE interrupt disable
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0220 	bic.w	r2, r2, #32
 8000f00:	601a      	str	r2, [r3, #0]
				pUSARTHandle->RxBusyState = USART_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f859 	bl	8000fc4 <USART_ApplicationEventCallback>
		}
	}

	/*************************Check for Overrun detection flag ********************************************/

	temp1 = (pUSARTHandle->pUSARTx->ISR & USART_ISR_ORE); //ORE: Overrun error
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	73fb      	strb	r3, [r7, #15]

	temp2 = (pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE); //RXNEIE: RXNE interrupt enable
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2) {
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d006      	beq.n	8000f42 <USART_IRQHandling+0x27e>
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <USART_IRQHandling+0x27e>

		USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f841 	bl	8000fc4 <USART_ApplicationEventCallback>
	}

	/*************************Check for Error Flag ********************************************/
	temp2 = pUSARTHandle->pUSARTx->CR3 & USART_CR3_EIE; //EIE: Error interrupt enable
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	73bb      	strb	r3, [r7, #14]

	if (temp2) {
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d01e      	beq.n	8000f94 <USART_IRQHandling+0x2d0>
		temp1 = pUSARTHandle->pUSARTx->ISR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	73fb      	strb	r3, [r7, #15]
		if (temp1 & (1 << 1))				//FE: Framing error
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <USART_IRQHandling+0x2ac>
				{

			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_FE);
 8000f68:	2105      	movs	r1, #5
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f82a 	bl	8000fc4 <USART_ApplicationEventCallback>
		}

		if (temp1 & (1 << 2))				//NF: START bit Noise detection flag
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <USART_IRQHandling+0x2be>

				{
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_NE);
 8000f7a:	2106      	movs	r1, #6
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 f821 	bl	8000fc4 <USART_ApplicationEventCallback>
		}

		if (temp1 & (1 << 3))				//ORE: Overrun error
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <USART_IRQHandling+0x2d0>
				{
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f818 	bl	8000fc4 <USART_ApplicationEventCallback>
		}
	}
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <USART_GetFlagStatus>:
 * @return            - flag status
 *
 * @Note              - none
 *
 */
uint8_t USART_GetFlagStatus(USART_Type *pUSARTx, uint32_t FlagName) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	if (pUSARTx->ISR & FlagName) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69da      	ldr	r2, [r3, #28]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <USART_GetFlagStatus+0x1a>
		return HIGH;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <USART_GetFlagStatus+0x1c>
	} else {
		return LOW;
 8000fb6:	2300      	movs	r3, #0
	}
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <USART_ApplicationEventCallback>:
 *
 * @Note              - none
 *
 */
__weak void USART_ApplicationEventCallback(USART_Handle *pUSARTHandle,
		uint8_t event) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]

}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <USART_SetBaudRate>:

/*
 * other
 */

void USART_SetBaudRate(USART_Type *pUSARTx, uint32_t BaudRate) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if (pUSARTx == USART1) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <USART_SetBaudRate+0xd0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d103      	bne.n	8000ffa <USART_SetBaudRate+0x1e>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000ff2:	f000 f8b7 	bl	8001164 <RCC_GetPCLK2Value>
 8000ff6:	61f8      	str	r0, [r7, #28]
 8000ff8:	e002      	b.n	8001000 <USART_SetBaudRate+0x24>
	} else {
		PCLKx = RCC_GetPCLK1Value();
 8000ffa:	f000 f85b 	bl	80010b4 <RCC_GetPCLK1Value>
 8000ffe:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if (pUSARTx->CR1 & (1 << 15)) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <USART_SetBaudRate+0x48>
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	009a      	lsls	r2, r3, #2
 8001016:	441a      	add	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	e00a      	b.n	800103a <USART_SetBaudRate+0x5e>
	} else {
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009a      	lsls	r2, r3, #2
 800102e:	441a      	add	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <USART_SetBaudRate+0xd4>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2264      	movs	r2, #100	; 0x64
 8001054:	fb02 f303 	mul.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if (pUSARTx->CR1 & (1 << 15)) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <USART_SetBaudRate+0xa4>
		//OVER8 = 1 , over sampling by 8
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t) 0x07);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	3332      	adds	r3, #50	; 0x32
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <USART_SetBaudRate+0xd4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e009      	b.n	8001094 <USART_SetBaudRate+0xb8>

	} else {
		//over sampling by 16
		F_part = (((F_part * 16) + 50) / 100) & ((uint8_t) 0x0F);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	3332      	adds	r3, #50	; 0x32
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <USART_SetBaudRate+0xd4>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40013800 	.word	0x40013800
 80010b0:	51eb851f 	.word	0x51eb851f

080010b4 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = { 2, 4, 8, 16, 64, 128, 256, 512 };
uint8_t APB1_PreScaler[4] = { 2, 4, 8, 16 };

uint32_t RCC_GetPCLK1Value(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <RCC_GetPCLK1Value+0x9c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0) {
 80010c8:	7a7b      	ldrb	r3, [r7, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <RCC_GetPCLK1Value+0x20>
		SystemClk = 8000000;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <RCC_GetPCLK1Value+0xa0>)
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e00b      	b.n	80010ec <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 1) {
 80010d4:	7a7b      	ldrb	r3, [r7, #9]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 32000000;
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <RCC_GetPCLK1Value+0xa4>)
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e005      	b.n	80010ec <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2) {
 80010e0:	7a7b      	ldrb	r3, [r7, #9]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d102      	bne.n	80010ec <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80010e6:	f000 f88d 	bl	8001204 <RCC_GetPLLOutputClock>
 80010ea:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <RCC_GetPCLK1Value+0x9c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	723b      	strb	r3, [r7, #8]

	if (temp < 8) {
 80010fa:	7a3b      	ldrb	r3, [r7, #8]
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	d802      	bhi.n	8001106 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	72fb      	strb	r3, [r7, #11]
 8001104:	e005      	b.n	8001112 <RCC_GetPCLK1Value+0x5e>
	} else {
		ahbp = AHB_PreScaler[temp - 8];
 8001106:	7a3b      	ldrb	r3, [r7, #8]
 8001108:	3b08      	subs	r3, #8
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <RCC_GetPCLK1Value+0xa8>)
 800110c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001110:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <RCC_GetPCLK1Value+0x9c>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	0a9b      	lsrs	r3, r3, #10
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	723b      	strb	r3, [r7, #8]

	if (temp < 4) {
 8001120:	7a3b      	ldrb	r3, [r7, #8]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d802      	bhi.n	800112c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	72bb      	strb	r3, [r7, #10]
 800112a:	e004      	b.n	8001136 <RCC_GetPCLK1Value+0x82>
	} else {
		apb1p = APB1_PreScaler[temp - 4];
 800112c:	7a3b      	ldrb	r3, [r7, #8]
 800112e:	3b04      	subs	r3, #4
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <RCC_GetPCLK1Value+0xac>)
 8001132:	5cd3      	ldrb	r3, [r2, r3]
 8001134:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	fbb2 f2f3 	udiv	r2, r2, r3
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000
 8001154:	007a1200 	.word	0x007a1200
 8001158:	01e84800 	.word	0x01e84800
 800115c:	20000400 	.word	0x20000400
 8001160:	20000410 	.word	0x20000410

08001164 <RCC_GetPCLK2Value>:
 *
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
	uint32_t SystemClock = 0, tmp, pclk2;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <RCC_GetPCLK2Value+0x8c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp, apb2p;

	if (clk_src == 0) {
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <RCC_GetPCLK2Value+0x24>
		SystemClock = 8000000;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <RCC_GetPCLK2Value+0x90>)
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e001      	b.n	800118c <RCC_GetPCLK2Value+0x28>
	} else {
		SystemClock = 32000000;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <RCC_GetPCLK2Value+0x94>)
 800118a:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4) & 0xF;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <RCC_GetPCLK2Value+0x8c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	607b      	str	r3, [r7, #4]

	if (tmp < 0x08) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d802      	bhi.n	80011a4 <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	72fb      	strb	r3, [r7, #11]
 80011a2:	e005      	b.n	80011b0 <RCC_GetPCLK2Value+0x4c>
	} else {
		ahbp = AHB_PreScaler[tmp - 8];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <RCC_GetPCLK2Value+0x98>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13) & 0x7;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <RCC_GetPCLK2Value+0x8c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	0b5b      	lsrs	r3, r3, #13
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	607b      	str	r3, [r7, #4]
	if (tmp < 0x04) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d802      	bhi.n	80011c8 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	72bb      	strb	r3, [r7, #10]
 80011c6:	e004      	b.n	80011d2 <RCC_GetPCLK2Value+0x6e>
	} else {
		apb2p = APB1_PreScaler[tmp - 4];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b04      	subs	r3, #4
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <RCC_GetPCLK2Value+0x9c>)
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp) / apb2p;
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011da:	7abb      	ldrb	r3, [r7, #10]
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	603b      	str	r3, [r7, #0]

	return pclk2;
 80011e2:	683b      	ldr	r3, [r7, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	007a1200 	.word	0x007a1200
 80011f8:	01e84800 	.word	0x01e84800
 80011fc:	20000400 	.word	0x20000400
 8001200:	20000410 	.word	0x20000410

08001204 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock() {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <__libc_init_array>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	4d0d      	ldr	r5, [pc, #52]	; (800124c <__libc_init_array+0x38>)
 8001218:	4c0d      	ldr	r4, [pc, #52]	; (8001250 <__libc_init_array+0x3c>)
 800121a:	1b64      	subs	r4, r4, r5
 800121c:	10a4      	asrs	r4, r4, #2
 800121e:	2600      	movs	r6, #0
 8001220:	42a6      	cmp	r6, r4
 8001222:	d109      	bne.n	8001238 <__libc_init_array+0x24>
 8001224:	4d0b      	ldr	r5, [pc, #44]	; (8001254 <__libc_init_array+0x40>)
 8001226:	4c0c      	ldr	r4, [pc, #48]	; (8001258 <__libc_init_array+0x44>)
 8001228:	f000 f818 	bl	800125c <_init>
 800122c:	1b64      	subs	r4, r4, r5
 800122e:	10a4      	asrs	r4, r4, #2
 8001230:	2600      	movs	r6, #0
 8001232:	42a6      	cmp	r6, r4
 8001234:	d105      	bne.n	8001242 <__libc_init_array+0x2e>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	f855 3b04 	ldr.w	r3, [r5], #4
 800123c:	4798      	blx	r3
 800123e:	3601      	adds	r6, #1
 8001240:	e7ee      	b.n	8001220 <__libc_init_array+0xc>
 8001242:	f855 3b04 	ldr.w	r3, [r5], #4
 8001246:	4798      	blx	r3
 8001248:	3601      	adds	r6, #1
 800124a:	e7f2      	b.n	8001232 <__libc_init_array+0x1e>
 800124c:	08001274 	.word	0x08001274
 8001250:	08001274 	.word	0x08001274
 8001254:	08001274 	.word	0x08001274
 8001258:	08001278 	.word	0x08001278

0800125c <_init>:
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	bf00      	nop
 8001260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001262:	bc08      	pop	{r3}
 8001264:	469e      	mov	lr, r3
 8001266:	4770      	bx	lr

08001268 <_fini>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr
